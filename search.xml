<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java Tutorial 02-class</title>
      <link href="/2018/06/10/Java-Tutorial-02/"/>
      <url>/2018/06/10/Java-Tutorial-02/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="imageAbstract"><br>  <img style="max-width:100%; overflow:hidden" src="/images/JavaFirstPage.png" alt=""><br></div><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract:"></a>Abstract:</h2><p>The lectures here will introduce the basic defination and ways to use the class probably including construct function, inheritaion, interface, abstract class and etc.</p><a id="more"></a><hr><p><br></p><h2 id="Lecture-05-Class-and-object-01"><a href="#Lecture-05-Class-and-object-01" class="headerlink" title="Lecture 05: Class and object 01"></a>Lecture 05: Class and object 01</h2><p><br></p><h3 id="1-Defination"><a href="#1-Defination" class="headerlink" title="1. Defination:"></a>1. Defination:</h3><p>[1] basic definatio of class and object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sop(num + <span class="string">", "</span> + color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.run();</span><br><span class="line">c.color;</span><br><span class="line">c.num;</span><br></pre></td></tr></table></figure><p>[2] member: variable and function.</p><p>[3] Storage: The object is created and stored in the heap, then the data heap will be initialized as null or 0 when being created.</p><p>[4] member variables and local variables:</p><ul><li><ol><li>member variables are defined in the class, which can be visited in side the class; local variables are defined in a function, region ir a statement, valid inside the defination area.</li></ol></li><li><ol start="2"><li>member variables exist in the object of a class of heap; local variable exists in the function of stack.</li></ol></li><li><ol start="3"><li>member variables appears with the objects. The local variables appears with the region.</li></ol></li><li><ol start="4"><li>member variables</li></ol></li></ul><p>[5] anonymous object: e.g. new Car().run(); -&gt; If we only want to use the function instead of creating the whole object.</p><ul><li><ol><li>Function of a class be used once;</li></ol></li><li><ol start="2"><li>Being used as transferring parameters; (show(new car()))</li></ol></li></ul><p>[6] Two cases:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">show(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x in the show is 4, x in the main is 3, output is 3;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Demo2 d = <span class="keyword">new</span> Demo2();</span><br><span class="line">d.x = <span class="number">9</span>;</span><br><span class="line">show(d);</span><br><span class="line">System.out.println(<span class="string">"x = "</span> + d.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Demo2 d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d.x = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x is 9 of the object d.</span></span><br></pre></td></tr></table></figure><p>[7] Encapsulation:</p><p>provide function to let others to read or write the private variables in the class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><br></p><h2 id="Lecture-06-Class-and-object-02"><a href="#Lecture-06-Class-and-object-02" class="headerlink" title="Lecture 06: Class and object 02"></a>Lecture 06: Class and object 02</h2><p><br></p><h3 id="1-Construct-function"><a href="#1-Construct-function" class="headerlink" title="1. Construct function:"></a>1. Construct function:</h3><p>[1] The same name with class name; no return value;</p><p>[2] For one object, construct function can only be used once.</p><p>[3] this:</p><pre><code>condition 1: local variable has the same name with member variable. &quot;this&quot; means the pointer to the object who use this -&gt; member variable. Actually, this is hidden when use the each member variable.condition 2: &quot;this&quot; can be used to help communicate among construct function: this(x) -&gt; one construct function can use another construct function. First execute the other construct function(must exist in the first line) then mine, else error may happen.</code></pre><p>[4] static:</p><ul><li><ol><li>Make the varibale/function to be shared by all of the object.</li></ol></li><li><ol start="2"><li>Make the varibale/function to be shared by the class.</li></ol></li><li><ol start="3"><li>The static varibale/function exists with the appearance of class.</li></ol></li><li><ol start="4"><li>Static function can only use the static member varibale/function. Non-static can visit all.</li></ol></li><li><ol start="5"><li>“this” and “super” keyword can not be used. (this.x is changed by the className.x)</li></ol></li><li><ol start="6"><li>main function is static.</li></ol></li><li><ol start="7"><li>When to use static. Keep the variable as a constant without change in class;</li></ol></li><li><ol start="8"><li>static region(static{}), This part is executed when the first time the class is built.</li></ol></li><li><ol start="9"><li>Construct region({} in class) can be used to initialized each objects of the class.</li></ol></li></ul><hr><p><br></p><h2 id="Lecture-07-Class-and-object-03"><a href="#Lecture-07-Class-and-object-03" class="headerlink" title="Lecture 07: Class and object 03"></a>Lecture 07: Class and object 03</h2><p><br></p><h3 id="1-Makeup-for-class"><a href="#1-Makeup-for-class" class="headerlink" title="1. Makeup for class:"></a>1. Makeup for class:</h3><p>[1] If there are more than  we need to javac each of the class.</p><p>[2] Expression: single example design:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span>)</span><br><span class="line">s = <span class="keyword">new</span> Single();</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Inherit"><a href="#2-Inherit" class="headerlink" title="2. Inherit:"></a>2. Inherit:</h3><p>[1] e.g. class Student extends Person{};</p><p>[2] single inherit and multiple inherit. (C++ has multiple inherit, but java cannot)</p><ul><li><ol><li>single inherit: one child has one parent; multiple inherit: one child has multiple parent.</li></ol></li><li><ol start="2"><li>problem with multiple inherit: if In the two parent two function with the same name may cause uncertainty.</li></ol></li><li><ol start="3"><li>If child has the variable, we do not search its parent (override), if local area contains the variable, we do not need to search the member variables. “this” is used to seperate the local and member variable. “super” is used to seperate the child and parent variable.</li></ol></li><li><ol start="4"><li>child cannot get the private varaible/function from its parent.</li></ol></li><li><ol start="5"><li>Create the child class’s object, then build its parent object. (there is a super() hidden in child class)</li></ol></li><li><ol start="6"><li>Override: child’s priority should be equal to or over than parent priority. (default priority &lt; public) Static can only override or be overrided by static.</li></ol></li><li><ol start="7"><li>Example: show(){//update; super.show();} -&gt; use super to extend parent’s function.</li></ol></li></ul><hr><p><br></p><h2 id="Lecture-08-Class-and-object-04"><a href="#Lecture-08-Class-and-object-04" class="headerlink" title="Lecture 08: Class and object 04"></a>Lecture 08: Class and object 04</h2><p><br></p><h3 id="1-Makeup-for-class-1"><a href="#1-Makeup-for-class-1" class="headerlink" title="1. Makeup for class:"></a>1. Makeup for class:</h3><p>[1] In the child class, there is a hidden super() to construct the parent first.</p><p>[2] If we have this, then we do not need super, because the this will will use the default construct function, then the super in the default construct function will build the parent construct function.</p><p>[3] Every class extends from the object(root).</p><p>[4] When a object is built, the construct function is built first, then comes the other initialization, no matter the location of the construct function.</p><p>[5] When a child object is built and the parent and child class contains the function with the same name and parameters, the construct function in its parent class will first search the function in child class. Because this is a child object.</p><h3 id="2-final-keyword"><a href="#2-final-keyword" class="headerlink" title="2. final keyword:"></a>2. final keyword:</h3><p>[1] If we want to use the method in its parent, while there is a function with the same name in child class, the function in parent will be banned.</p><p>[2] final keyword will prevent child class extends the function.</p><p>[3] final can use for function, variable and class which will not be inherited.</p><p>[4] If the member is decorated by final, we usually use public static final to solid the variable.</p><h3 id="3-Abstract-class"><a href="#3-Abstract-class" class="headerlink" title="3. Abstract class:"></a>3. Abstract class:</h3><p>[1] Both the class name and its member should be decorated by abstract.</p><p>[2] abstract class cannot be built (e.g. new Parent()).</p><p>[3] abstract class must has child class.</p><p>[4] abstract has construct function for child class; abstract can be empty; abstract class cannot be decorated by private, static, final; abstract class can include abstract function and normal function.</p><h3 id="4-Interface"><a href="#4-Interface" class="headerlink" title="4. Interface:"></a>4. Interface:</h3><p>[1] When the function of a abstract class are all abstract, we can use the keyword interface to represent this function.</p><p>[2] Substitude class by interface.</p><p>[3] Member of interface:</p><ul><li><ol><li>global variable: public static final.</li></ol></li><li><ol start="2"><li>abstract function: public abstract.  </li></ol></li><li><ol start="3"><li>The variable and function can be initialized as above if we do not give enough decoration.</li></ol></li></ul><p>[4] The implement class must override all of the abstract function in the interface, or the class is abstract class which needs child to realize the other abstract functions.</p><p>[5] On function an implement multiple interface. If two interface has the same function, one function in the class will implement all of them.</p><p>[6] Extenstion with inheritation and implement.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">extends</span> <span class="title">Q</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[7] interfaces can be parent &amp; child relationship among themselves, and they can be multiple inherit. Because there is not function implements.</p><hr><p><br></p><h2 id="Lecture-09-Class-and-object-05"><a href="#Lecture-09-Class-and-object-05" class="headerlink" title="Lecture 09: Class and object 05"></a>Lecture 09: Class and object 05</h2><p><br></p><h3 id="1-Polymorphism："><a href="#1-Polymorphism：" class="headerlink" title="1. Polymorphism："></a>1. Polymorphism：</h3><p>[1] improve the class: Animal a = new Cat(); a is a class from Cat to Animal, the function of Animal can be used but special function of Cat cannot be used. It is used to restrict the special implement of function. Afterwards if we still need to use the special function, we need to downgrade the object: Cat c = (Cat) a; However we cannot convert an parent object into child object.</p><p>[2] instanceof: a instanceof Cat -&gt; used to judge the class/interface specific type. a instanceof parent, a instanceof child, to be more specific. In order to avoid the case like (Cat c = (Cat) a).</p><p>[3] Override only happen in member function, but not happen in member variables.</p><ul><li><ol><li>Member variables: Compiling and Excuting type follow the left type.</li></ol></li><li><ol start="2"><li>Member function: Compiling follows the left, while excuting follows the right.</li></ol></li><li><ol start="3"><li>Static function: Because Static belongs to class not object, thus; Compiling and Excuting type follow the left type.</li></ol></li></ul><h3 id="2-Inner-class"><a href="#2-Inner-class" class="headerlink" title="2. Inner class:"></a>2. Inner class:</h3><p>[1] Expression: Outer$Inner.class.</p><p>[2] Inside class can directly visit outside member, while the outside class need to build object to visit inside member.</p><p>[3] Other outside class visit the inside member: Outer.Inner in = new Outer.new Inner(); If the inside class is private, the outer other class cannot visit the inside class.</p><p>[4] static class inner(): The inner appears when the outer class is built. Then the inner() class is like a outer class. Then Outer.Inner in = new Outer.Inner(); The outer object does not need to be built. (If the member function in the inner class is static then the inner class should be static either).</p><p>[5] Inner class has the reference to outer class: Outer.this.</p><p>[6] Inner class can be put in the local area: like inside the function of Outer class. If the function want to use the function inside the inner class, it needs to build object to realize this problem. If the inner class need to use the local variable of the function outside, then the variable outside needs to decorated by final. (include the variable in the function “()”)</p><p>[7] Inner class should be static if the member function of the outer class is static and it wants to build the inner class.</p><h3 id="Anonymous-inner-class"><a href="#Anonymous-inner-class" class="headerlink" title="Anonymous inner class:"></a>Anonymous inner class:</h3><p>[1] The inner class must extends or implements a outer class or interface.</p><p>[2] As usual, the number of functions in the abstract class should be smaller than or equal to 3.</p><p>[3] Difference between Object obj = new Object() and new Object() -&gt; The first one build the Object, while the second is converted into the anonymous class.</p><p><br></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Tutorial 01-basic gramma</title>
      <link href="/2018/06/09/Java-Tutorial-01/"/>
      <url>/2018/06/09/Java-Tutorial-01/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="imageAbstract"><br>  <img style="max-width:100%; overflow:hidden" src="/images/JavaFirstPage.png" alt=""><br></div><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract:"></a>Abstract:</h2><p>This part we start to introduce the basic rules and how to compile the algorithm with Java in detail. The first part will introduce some very basic staff. If I miss something important, please let me know in the comment area.</p><a id="more"></a><hr><p><br></p><h2 id="Lecture-01-Hello-world"><a href="#Lecture-01-Hello-world" class="headerlink" title="Lecture 01: Hello world!"></a>Lecture 01: Hello world!</h2><p><br></p><h3 id="1-Basic-Code"><a href="#1-Basic-Code" class="headerlink" title="1. Basic Code:"></a>1. Basic Code:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Demo</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span></span><br></pre></td></tr></table></figure><h3 id="2-Two-kinds-of-print"><a href="#2-Two-kinds-of-print" class="headerlink" title="2. Two kinds of print:"></a>2. Two kinds of print:</h3><p>[1] System.out.println(“”): print with enter in the end</p><p>[2] System.out.print(“”): print with enter in the end</p><h3 id="3-Compile-java-file-and-execute-java-file"><a href="#3-Compile-java-file-and-execute-java-file" class="headerlink" title="3. Compile java file and execute java file:"></a>3. Compile java file and execute java file:</h3><p>[1] Compile java file to .class file and check the error.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac &lt;name&gt;.java</span><br></pre></td></tr></table></figure><p>[2] execute java file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java &lt;name&gt;.class</span><br></pre></td></tr></table></figure><h3 id="4-Java-makefile"><a href="#4-Java-makefile" class="headerlink" title="4. Java makefile."></a>4. Java makefile.</h3><h3 id="5-Java-set-classpath-executing-the-class-file-under-the-folder-we-need-Temporary-p-s-CLASSPATH-means-the-already-pointed-path"><a href="#5-Java-set-classpath-executing-the-class-file-under-the-folder-we-need-Temporary-p-s-CLASSPATH-means-the-already-pointed-path" class="headerlink" title="5. Java set classpath, executing the .class file under the folder we need. (Temporary); p.s. %CLASSPATH% means the already pointed path."></a>5. Java set classpath, executing the .class file under the folder we need. (Temporary); p.s. %CLASSPATH% means the already pointed path.</h3><p>The only path to find without ‘;’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set classpath=&lt;path&gt; (e.g. c:\myclass)</span><br></pre></td></tr></table></figure><p>The first path to find in the path, then to the following path.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set classpath=&lt;path&gt;;</span><br></pre></td></tr></table></figure><p>Firstly search the path in the upper folder, then to the pointed path.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set classpath=.;&lt;path&gt;</span><br></pre></td></tr></table></figure><h3 id="6-public-class-Demo-only-if-the-class-name-and-the-file-name-keep-the-same-then-the-file-will-be-compiled"><a href="#6-public-class-Demo-only-if-the-class-name-and-the-file-name-keep-the-same-then-the-file-will-be-compiled" class="headerlink" title="6. public class Demo: only if the class name and the file name keep the same, then the file will be compiled."></a>6. public class Demo: only if the class name and the file name keep the same, then the file will be compiled.</h3><hr><p><br></p><h2 id="Lecture-02-Basic-gramma-1"><a href="#Lecture-02-Basic-gramma-1" class="headerlink" title="Lecture 02: Basic gramma 1"></a>Lecture 02: Basic gramma 1</h2><p><br></p><h3 id="1-Keywords"><a href="#1-Keywords" class="headerlink" title="1. Keywords:"></a>1. Keywords:</h3><p>[1] class, interface, byte, short, int, long, float, double, char, boolean, void; true, false, null; if, else, switch, case, default, while, do, for, break, continue, return; private, protected, public, abstract, final, static, synchronized, extends, implements; new, this, super, instanceof, try, catch, finally, throw, throws; package, import; native, strictfp, transient, volatile, assert.</p><p>[2] p.s. The name of class should start with upperclass.</p><h3 id="2-Identifiers"><a href="#2-Identifiers" class="headerlink" title="2. Identifiers:"></a>2. Identifiers:</h3><p>[1] Rule: (Use to define the name)</p><ul><li><ol><li>Include 26 Uppercase/lowercase letters, 0-9, _ and $;</li></ol></li><li><ol start="2"><li>Cannot start with 0-9;</li></ol></li><li><ol start="3"><li>Cannot use Keywords.</li></ol></li></ul><h3 id="3-Comments"><a href="#3-Comments" class="headerlink" title="3. Comments:"></a>3. Comments:</h3><p>[1] Example: Demands &lt;…&gt;; Thought &lt;…&gt;; Steps &lt;…&gt;</p><h3 id="4-Constants-and-variables"><a href="#4-Constants-and-variables" class="headerlink" title="4. Constants and variables:"></a>4. Constants and variables:</h3><p>[1] Constants: values cannot be changed. (int, float, boolean, ‘’char(ASCII), “”String, null)</p><ul><li><ol><li>Default: decimal, 0… -&gt; Oct; 0x… -&gt; Hex;</li></ol></li><li><ol start="2"><li>Complement: 0000-0110 -&gt; 1111_1001 + 0000_0001 = 1111_1010</li></ol></li></ul><p>[2] Variables:</p><ul><li><ol><li>bytes(8 bits(-128-&gt;+127)), short(16 bits), int(32 bits), long(64 bits); default: int</li></ol></li><li><ol start="2"><li>float(32 bits), double(64 bits); default: double;</li></ol></li><li><ol start="3"><li>char(2 bits)</li></ol></li><li><ol start="4"><li>boolean</li></ol></li><li><ol start="5"><li>class</li></ol></li><li><ol start="6"><li>interface</li></ol></li><li><ol start="7"><li>[]</li></ol></li></ul><p>[3] Conversion:</p><ul><li><ol><li><p>Automatic type convert:</p><p>x = b + 1; (x’s type decide the final type)</p></li></ol></li><li><ol start="2"><li><p>Convert:</p><p>y = (int)x;</p></li></ol></li><li><ol start="3"><li>b = b1 + b2 -&gt; might lose accuarcy if b,b1 and b2 in the same type, because the b1 and b2 may change, then the sum might over the limit.(e.g. byte)</li></ol><p>For the default type like int, the answer will not be alarmed to loss accuarcy, however actually the accuarcy may lose.</p></li></ul><h3 id="Caculation"><a href="#Caculation" class="headerlink" title="Caculation"></a>Caculation</h3><p>[1] Compute:</p><ul><li><ol><li>‘/‘ interger divide; ‘%’;</li></ol></li><li><ol start="2"><li>++, –;</li></ol></li><li><ol start="3"><li>short s = 3; s += 4 / s = s + 4;<br>The second one may cause error, because the  sum may over the limit making the accuarcy loss. However, the first one, the error may not happen, the automatic conversion may happen, then the alert may be avoided. (s = (short)(s + 4) -&gt; s += 4)</li></ol></li></ul><p>[2] Comparison:</p><ul><li><ol><li>&amp;, |, ^, !; e.g.(x&gt;2 &amp; x&lt;5)</li></ol></li><li><ol start="2"><li>&amp;&amp; and ||: if left false/true for &amp;&amp;/||, the right part will not be executed</li></ol></li><li><ol start="3"><li>&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;, &amp;, |, ^, ~: &gt;&gt;&gt;: unsigned left shift 1</li></ol></li><li><ol start="4"><li>(x&gt;1)?100:200</li></ol></li></ul><hr><p><br></p><h2 id="Lecture-03-Basic-gramma-2"><a href="#Lecture-03-Basic-gramma-2" class="headerlink" title="Lecture 03: Basic gramma 2"></a>Lecture 03: Basic gramma 2</h2><h3 id="1-Function"><a href="#1-Function" class="headerlink" title="1. Function:"></a>1. Function:</h3><p>[1] Overload:</p><ul><li><ol><li>In the same class;</li></ol></li><li><ol start="2"><li>With the same name;</li></ol></li><li><ol start="3"><li>different number of parameters or parameters with different types;</li></ol></li></ul><h3 id="2-Array"><a href="#2-Array" class="headerlink" title="2. Array:"></a>2. Array:</h3><p>[1] Defination:</p><ul><li><ol><li>Start with 0;</li></ol></li><li><ol start="2"><li>Defination: int[] arr = new int[5]; int[] arr = new int[] {3,5,1,7}; int[] arr = {3,5,1,7}</li></ol></li><li><ol start="3"><li>initial with default 0;</li></ol></li><li><ol start="4"><li>The array is actually created during the execution time instead of compiling, so if the index is out of range, the error will be reported only during the execution time.</li></ol></li><li><ol start="5"><li>The array will point to nothing, if we let arr = null.</li></ol></li></ul><p>[4] Storage;</p><ul><li><ol><li>Stack: store the local variables.</li></ol></li><li><ol start="2"><li>Heap: store the arrays, objects(created by new) and global variables, main. (default: float: 0.0f; double: 0.0; boolean: false; char ‘\u0000’).</li></ol><ul><li><ol><li>Each thing in the heap contains a header address;</li></ol></li><li><ol start="2"><li>Each variable in the heap is initialized in the default value.</li></ol></li><li><ol start="3"><li>The useless buffer int the heap can be recycled automatically, while C++ need to use destructor function to deal with this problem.</li></ol></li></ul></li></ul><hr><p><br></p><h2 id="Lecture-04-Basic-gramma-3"><a href="#Lecture-04-Basic-gramma-3" class="headerlink" title="Lecture 04: Basic gramma 3"></a>Lecture 04: Basic gramma 3</h2><h3 id="1-Array-make-up"><a href="#1-Array-make-up" class="headerlink" title="1. Array (make up):"></a>1. Array (make up):</h3><p>[1] two types of array defination:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[]&#123;1, 2, 3, 4&#125;;</span><br><span class="line">int[] arr = &#123;1, 2, 3, 4&#125;;</span><br></pre></td></tr></table></figure><ul><li>Normally for reading the 1 and 2 are the same, however there are tiny different between the two defination for transferring new value.(1: dynamic; 2: static)</li></ul><p>[2] int[] arr = new int[3]; (arr.length)</p><p>[3] decimal to hex:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n1 = num &amp; <span class="number">15</span>;</span><br><span class="line">num &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">n2 = num &amp; <span class="number">15</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-D-Array"><a href="#2-2-D-Array" class="headerlink" title="2. 2-D Array"></a>2. 2-D Array</h3><p>[1] Defination:</p><ul><li><ol><li>First create 3 then 2.</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr  = new int[3][2];</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>multi-steps:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = new int[3][];</span><br><span class="line">arr[0] = new int[2];</span><br><span class="line">arr[1] = new int[1];</span><br><span class="line">arr[2] = new int[3];</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>column length = arr.length, row length = arr[i].length;</li></ol></li><li><ol start="4"><li>define the array while each element is known;</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = &#123;&#123;3, 1, 7&#125;, &#123;5, 8, 2, 9&#125;, &#123;4, 1&#125;&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Start with Hexo</title>
      <link href="/2018/06/08/StartWithHexo/"/>
      <url>/2018/06/08/StartWithHexo/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="abstract"><br>  <img style="max-width:100%; overflow:hidden" src="/images/hexo.jpg" alt=""><br></div><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract:"></a>Abstract:</h2><p>This is my first blog, thanks to the toolkits of <b>Hexo</b> helpping me reduce large amount of time and energy for studying and searching. This blog is to conclude the function and tools that I need to use for developing my future blogs. In breif, the tutorial starts with basic ways of using <b>Markdown</b> and html language for beautifying the webpages, functions used under the frameworks of the <b>Hexo</b> and some plugins that can improve the type of media for the expression. Finally the reference of the source I might use and copyright might involve will be put in the end of the articles.</p><a id="more"></a><h2 id="Announcement"><a href="#Announcement" class="headerlink" title="Announcement:"></a>Announcement:</h2><p>This is my first blog to record interesting things and the new cool things I studied recently. Everything I put on my blog may include objects of mine or others. (I will assign the author and the link at the end of the articals) These thoughts and objections may not right and may only represent my personal view. So, if there exist something not so well or even worse, please let me know in the comment area.</p><h2 id="Markdown-basic"><a href="#Markdown-basic" class="headerlink" title="Markdown basic:"></a>Markdown basic:</h2><h3 id="1-Title"><a href="#1-Title" class="headerlink" title="1. Title:"></a>1. Title:</h3><p>There are two ways to write the title, Atx and Setext:</p><ul><li>Atx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># first title</span><br><span class="line">## second title</span><br><span class="line">### third title</span><br><span class="line">#### forth title</span><br><span class="line">##### fifth title</span><br><span class="line">###### sixth title</span><br></pre></td></tr></table></figure><p>effect:<br><img src="/images/effect1.png" alt="effect1"></p><p><br></p><ul><li>Setext</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first title</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">second title</span><br><span class="line">------</span><br></pre></td></tr></table></figure><p>effect:<br><img src="/images/effect2.png" alt="effect2"><br><br></p><h3 id="2-font-format-and-paragragh-structure"><a href="#2-font-format-and-paragragh-structure" class="headerlink" title="2. font format and paragragh structure:"></a>2. font format and paragragh structure:</h3><p>Including bold, Italic, delete line, newline, dividing line, indent ,disordered list and the link. The code is as follow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 1. bold font</span><br><span class="line">**word**</span><br><span class="line">__word__</span><br><span class="line">&lt;b&gt;word&lt;/b&gt;</span><br><span class="line"></span><br><span class="line">// 2. Italic font</span><br><span class="line">*word*</span><br><span class="line">_word_</span><br><span class="line">&lt;i&gt;word&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">// 4. delete line</span><br><span class="line">~~word~~</span><br><span class="line">&lt;del&gt;word&lt;/del&gt;</span><br><span class="line"></span><br><span class="line">// 5. Italic and bold font</span><br><span class="line">_**word**_</span><br><span class="line"></span><br><span class="line">// 3. newline, click enter twice, click space or:</span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">// 4. dividing line</span><br><span class="line">***</span><br><span class="line">---</span><br><span class="line">__</span><br><span class="line"></span><br><span class="line">// 5. indent:</span><br><span class="line">&gt;sentence of 1 indent</span><br><span class="line">&gt;&gt;sentence of 2 indent</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 6. disordered list:</span><br><span class="line">&lt;h4 id=&quot;disorderlist&quot;&gt;the list&lt;/h4&gt;</span><br><span class="line">* list 1</span><br><span class="line">* list 2</span><br><span class="line"></span><br><span class="line">// 7. the link:</span><br><span class="line">[Writing](url)</span><br></pre></td></tr></table></figure><h3 id="3-content-and-table"><a href="#3-content-and-table" class="headerlink" title="3. content and table:"></a>3. content and table:</h3><p>The code is as follow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// content</span><br><span class="line"> &lt;h1 id=&quot;title1&quot;&gt;title1&lt;/h1&gt; //sign the title1</span><br><span class="line"> [the name of title1](#title1) //jump to the title 1</span><br><span class="line"></span><br><span class="line">// table, every font of the element inside can be adjust as bold, italic and etc.</span><br><span class="line">title 1|title 2|title 3</span><br><span class="line">---|---|--- //make a line to divide the table and</span><br><span class="line">content 1|content 2|content 3</span><br><span class="line">content 4|content 5|content 6</span><br></pre></td></tr></table></figure><p>effect of the table:</p><table><thead><tr><th>title 1</th><th>title 2</th><th>title 3</th></tr></thead><tbody><tr><td>content 1</td><td>content 2</td><td>content 3</td></tr><tr><td>content 4</td><td>content 5</td><td>content 6</td></tr></tbody></table><p><br></p><h3 id="4-Others"><a href="#4-Others" class="headerlink" title="4. Others:"></a>4. Others:</h3><p>This part will present how to insert image, video and music.</p><p><br></p><h4 id="Image"><a href="#Image" class="headerlink" title="Image:"></a>Image:</h4><p>there are two ways to insert.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Writing](url)// first</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;abstract&quot;&gt;</span><br><span class="line">  &lt;img style=&quot;max-width:100%; overflow:hidden&quot; src=&quot;/images/hexo.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">&lt;/div&gt; // second: &quot;div&quot; is used to keep the image inside the border, the &quot;max-width&quot; control the size, the &quot;overflow&quot; is used control whether to hide the border or not, &quot;src&quot; means the url.</span><br></pre></td></tr></table></figure></p><p><img src="/images/wallhaven.jpg" alt="image test"><br><em>The picture wall heaven.</em><br><br></p><h4 id="video"><a href="#video" class="headerlink" title="video:"></a>video:</h4><p>There are three ways to insert video, the first is the special plugin for youtube video, the second one is used to deal with local(cloud) video, and the last one is for the normal other types of videos for all types of online video. The code is as follow.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube youtube_id %&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;video&quot;&gt;</span><br><span class="line">  &lt;video id=&quot;video&quot; width=&quot;#&quot; height=&quot;#&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;url for the video poster&quot;&gt;</span><br><span class="line">    &lt;source id=&quot;id name&quot; src=&quot;url for the video address&quot; type=&quot;video/mp4(type of video)&quot;&gt;</span><br><span class="line">  &lt;/video&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe</span><br><span class="line">    height=#</span><br><span class="line">    width=#</span><br><span class="line">    src=&quot;url&quot;</span><br><span class="line">    frameborder=0</span><br><span class="line">    allowfullscreen&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><br></p><p>There is another plugin for playing online youku video. Here are several steps to do to use the plugin.</p><ul><li><ol><li>First install the <em><strong>hexo-tag-youku</strong></em> plugin in git bash under the folder of the Hexo:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-youku --save</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>add the youku video as follow:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youku height width %&#125;</span><br><span class="line">youku_id</span><br><span class="line">&#123;% endyouku %&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>Effects of video playing is shown as follow.</p><ul><li><ol><li>youtube plugin.</li></ol></li></ul><p><br><br><div class="video-container"><iframe src="//www.youtube.com/embed/Ud1xAhu7t2Y" frameborder="0" allowfullscreen></iframe></div></p><p><br></p><ul><li><ol start="2"><li>video player for cloud/local video.</li></ol></li></ul><div class="video1"><br>  <video id="video" style="max-width:100%; overflow:hidden" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>    <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4"><br>  </video><br></div><p><br></p><ul><li><ol start="3"><li>iframe for all types of videos.</li></ol></li></ul><iframe width="760" height="450" src="https://v.youku.com/v_show/id_XMjg5MTI4MTYyNA==.html?spm=a2h0k.11417342.soresults.dtitle" frameborder="0" allowfullscreen><br></iframe><p><br></p><ul><li><ol start="4"><li>plugin for youku videos.</li></ol></li></ul><p><br><br><iframe height="450" width="760" src="http://player.youku.com/embed/XMjg5MTI4MTYyNA" frameborder="0" allowfullscreen></iframe></p><p><br><br>p.s. Inorder to make the image and video player changing automatically to ensure different size of windows, we add this instead of real width and height. (Only useful for the some of video html clip and img html clip)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=&quot;max-width:100%; overflow:hidden&quot;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="music"><a href="#music" class="headerlink" title="music"></a>music</h4><p>There is a plugin for playing music. Here are several steps to do to use the plugin.</p><ul><li><ol><li>First install the <em><strong>hexo-tag-aplayer</strong></em> plugin in git bash under the folder of the Hexo:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>add the music as follow:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><p><br><br>        <div id="aplayer-vbDLLbbM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-vbDLLbbM"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Kass Theme",              author: "Nintendo",              url: "/others/Kass Theme.mp3",              pic: "/images/Zelda Ost.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><br><em>Kass theme from Zelda Breath of Wild Ost</em></p><p><br></p><h2 id="import-operations-in-Hexo"><a href="#import-operations-in-Hexo" class="headerlink" title="import operations in Hexo:"></a>import operations in Hexo:</h2><p><br></p><h3 id="normal-operations"><a href="#normal-operations" class="headerlink" title="normal operations:"></a>normal operations:</h3><ul><li><ol><li>First we need to have a github repository.</li></ol></li><li><ol start="2"><li>Then we need to install the Hexo under the folder.</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># install hexo</span><br><span class="line">npm install hexo-cli g</span><br><span class="line"># init the blog folder</span><br><span class="line">hexo init blog</span><br><span class="line"># enter the blog folder</span><br><span class="line">cd blog</span><br><span class="line"># install npm</span><br><span class="line">npm install</span><br><span class="line"># install some plugins</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>generate the local server:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># create the static webpages</span><br><span class="line">hexo generate</span><br><span class="line"># open the server</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"># If the server 4000 does not repond, make some change as follow.</span><br><span class="line">hexo s -p 4001</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>build a new Markdown file for a new blog:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>deploy the hexo bolg to the github.<br>adjust the _<strong>blog/_config.yml</strong>_ file as follow:</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs:</span><br><span class="line">deploy:</span><br><span class="line">  # types</span><br><span class="line">  type: git</span><br><span class="line">  # repository</span><br><span class="line">  repo: git@github.com:name/name.github.io.git</span><br><span class="line">  # branch</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>deploy the blog to the github.</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># clean the static webpage</span><br><span class="line">hexo clean</span><br><span class="line"># generate static page</span><br><span class="line">hexo generate</span><br><span class="line"># deploy blog</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><ul><li><b>[1]: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a></b></li><li><b>[2]: <a href="https://www.jianshu.com/p/2c9f0b3b2b0e" target="_blank" rel="noopener">https://www.jianshu.com/p/2c9f0b3b2b0e</a></b></li><li><b>[3]: <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">https://github.com/fi3ework/hexo-theme-archer</a></b></li><li><b>[4]: <a href="https://www.jianshu.com/p/0130ad32a08d" target="_blank" rel="noopener">https://www.jianshu.com/p/0130ad32a08d</a></b></li><li><b>[5]: <a href="https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1</a></b></li><li><b>[6]: <a href="https://blog.csdn.net/huwei2003/article/details/52523407" target="_blank" rel="noopener">https://blog.csdn.net/huwei2003/article/details/52523407</a></b></li><li><b>[7]: <a href="https://www.jianshu.com/p/6e41e3191963" target="_blank" rel="noopener">https://www.jianshu.com/p/6e41e3191963</a></b></li><li><b>[8]: <a href="https://segmentfault.com/q/1010000000424925/a-1020000007644640" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000424925/a-1020000007644640</a></b></li><li><b>[9]: <a href="https://blog.csdn.net/q_qtowerq_q/article/details/78565166" target="_blank" rel="noopener">https://blog.csdn.net/q_qtowerq_q/article/details/78565166</a><br><br></b></li></ul>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Webpage Design </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
