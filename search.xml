<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android Tutorial 01-introduction and basic components]]></title>
    <url>%2F2018%2F06%2F10%2FAndroid-Tutorial-01%2F</url>
    <content type="text"><![CDATA[Abstract:In this part, I start to learn the basic knowledge and skills of developing android applications. Thanks to the class CS 193A from stanford University on youtube (for all android blog afterwards), the experience of study would be much easier. In the lectures here, a brief introduction of using Android studio and the import elements involved during the application development will be mentioned. Lecture 01: introduction1. Pre-requites:[1] Java 2. Introduction:[1] Java for dev, Linux for kernel. [2] Why develop android instead of websites. More smooth and swift. [3] Architecture: code is not tranferred into “.class” file as binary format for Java but the Dalvik binary format software: Android Studio;[4] Project structure: AndroidManifest.xml: setting and configs; (no need to put files) src/java/…: source code for your java classes; (no need to put files) res/…: resource fules(like XML): drawable/-&gt;images; layout/ =description; menu/ = overall app menu options; values/ = constant values and arrays; strings/ = localization data; styles/ = general appearance styling; Gradle: a build/compile makefile, and the build.gradle is the main makefile;[5] Virtual Devices (AVDs): Simulate the apps;[6] Create the first app: Rules: “Bigger Number”: user is shown 2 numbers. Click button to choose the bigger one; correct/incorrect message after each guess; earn points for each correct answer. Need to learn: How to create the position graphical widgets. How to respond to user events. Steps to run: Start a new project for android studio. Click Next through most of the menus. Choose “Empty Activity” instead of “Blank Activity” If we run our file, we can choose a plugged in phone to test or virtual machine. Terminology: activity: a screen of an app of UI; view: On screen items: widget: GUI control such as a buttom; layout: invisible container to position/size widgets; event: action that occurs when user interacts with widgets.(clicking, typing, scrolling) action bar: top menu of common actions; notification area: top system menu; widgets: includes clocks, button, checkbox and etc. Design a UI: XML file is for the layout. (like website) drag widgets from left Palette to the preview image. set their properties in lower-right Properties panel. [7] Event: An external stimulus your program can respond to.(Mouse motion/tapping, key pressed; Timers expiring, Network data available) We should respond to events with methods to handle. Attach those methods to particular GUI widgets. Give the action a name and create the function with the name in the Mainactivity class. So we need to inialize data in this main method. The View objects get/set methods to design the properties like backgroud, bottom, ID and etc. (e.g. CharSequence getText() and void setText(String text)) In Java code we use findViewById to access its View object. (Pass it a parameter of R.id.your_unique_ID and cast the returned value to the appropriate type(Button, TextView, etc.))12345public void botton1_onclick(View view)&#123; TextView tv = (TextView) findViewById(R.id.mytextview); tv.setText("You clicked it!");&#125; p.s. Integer.valueOf(s); String.valueOf(n); o.toString() ID of the design view of the .xml is selfdesigned id we will use and the id’s format in the function findViewById should be R.id.ID_Name. e.g. Button button = (Button) findViewById(R.id.Left_Bottom);[8] Toast: a pop-up message that appears for a short time. (Toast.makeText(this,”text”,Toast.LENGTH_SHORT).show()) Lecture 02: Layout and GUI Widgets1. Button:[1] clickable: (true/false) Set false to disable the button; [2] id: unique ID for Java; [3] onCLick: “function” function to call in activity when clicked; [4] text: text to put in the button; 2. TextView:[1] ID: unique ID; [2] text: text to display; (.setText()) p.s. We can put a scroll view of the text view: 3. Size and position:[1] Absolute position: size in (x = 15, y = 75) like C++, C# and etc. [2] Layout manager: Decide where to position each component based on some general rules or criteria. Better for variety devices. ViewGroup as layout:[1] ViewGroup superclass represents containers of views: mirror the code in Java from the XML file to get the parameters or set the widgets. [2] Activity itself is also a ViewGroup, so do the various layout classes. 4. XML:[1] a language for describing hiearchical text data. Use tags that consist of elements and attributes. Tags can be nested. Some tags are opened and closed; others self-close. e.g. … or 5. Changing layouts: LinearLayout[1] Go to the Text view for xml. [2] change open/close tags to new layout type, e.g. LinearLayout. [3] now go back to Design view and add widgets. [4] Linear Layout: lays out widgets/views in a single line; orientation of horizontal or vertical; items do not wrap if they reach edge of screen; change the tag to LinearLayout; [5] Gravity: alignment direction that widgets are pulled: top, bottom, left, right and center. (combine multiple with ‘|’). Set gravity on the layout to adjust all widgets; set layout_gravity on an individual widget. e.g. or to individual widget: android: layout_gravity=”left”; [6] Widget box model content: size of widget itself. padding: artificial increase to widget size outside of content. border: outside padding, aline around edge of widget. margin: invisible separation from neighboring widgets.[7] Sizing an individual widget: wrap_content: exactly large enough to fit the widget’s content match_parent: as wide or tall as 100% of the screen of layout. a specific fixed width such as 64dp (not usually recommended) dp = device pixels; dip = deice-independent pixels; sp = scaling pixels; [8] Padding: extra space inside widget: set padding to adjust all sides; paddingTop, Bottom, Left, Right for one side; Usually set to specific values like 10dp. (some widgets have a default value 16dp) [9] Margin: extra blank space outside widget: set layout_margin to adjust all sides; layout_marginTop, Bottom, Left and Right; Usually set to specific values like 10dp. (set defaults in res/values/dimens.xml) 6. Changing layouts: GridLayout.[1] lays out widgets/views in lines of rows and columns. [2] orientation attribute defines row/column-major order [3] introduced in Android 4; replacing the TableLayout [4] each widget placed into “next” available row/column unless givena layout_row and layout_column attribute [5] We need rowCount and ColumnCount to set the widgets’ positions. (layout_columnSpan = “2”) [6] layout_rowWeight and layout_columnWeight to make button fill the space. 7. Nested layout.[1] OuterLayout -&gt; InnerLayout -&gt; Widget RelativLayout:[1] Each widget’s position and size are relative to other views: relative to “parent” (the activity itself) relative to other widgets/views x-positions of reference: left, right, center; y-positions of reference: top,bottom, center; [2] We need to anchor the position. Lecture 03 Widgets and Lists:1. Library: (Stanford Android Library as an example)[1] move the “.jar” under the folder of lib under the project view, then right click the file and choose “add as a library” then we can use some examples or classes under it. [2] example 1. We can extends SimpleActivity instead of normal AppCompatActivity. We can go to the declaration of the class to know how exactly it works. [3] example 2. “Button lbutt = (Button) findViewById(R.id.Left_button);” = “Button lbutt = $(R.id.Left_button);” “Button lbutt = (Button) findViewById(R.id.Left_button); lbutt.setText(String.valueOf(rand1))” = “$B(R.id.Left_button).setText(String.valueOf(rand1));” ($B,$CB,$TV…) [4] example 3. “Toast.makeTex(this,”Great job!”,Toast.LENGTH_SHORT).show()” = “toast(“Great job”);”. 2. EditText: EditText myEditText = (EditText) findViewById(R.id.theID); String text = myEditText.getText().toString();[1] ID: unique ID [2] hint = “text”: gray placeholder text shown before user types. [3] inputType = “type”: what kind of input is being typed: number, phone, data, time… [4] lines = “int”: number of visble lines of input. [5] maxLines = “int”: max lines to allow user to type in the box. [6] text = “text”: initial text to put in box. [7] textSize = “size”: font size. 3. ImageView: ImageView myImageView = (ImageView) findViewById(R.id.theID); myImageView.setImageResource(R.drawable.filename);[1] id: unique ID. [2] src = “/img.jpg”: image to put in the view. [3] tag = “string”: a text tag to associate with the image. [4] scaleType = “type”: causes the image to grow/shrink; can be “center”, “ccenterCorp”, “fitCenter”, “matrix”, … p.s. The resource file should be put under the right folder under the file “res/“. (e.g. res/drawable/image.jpg) Then refering to the resource in XML: @type/name. (e.g. @drawable/image) Finally, refering to a resource ID in the Java code: R.type.name. (e.g. T.drawable.image)(app/src/main/res/drawable) 4. RadioButton[1] id: unique ID. [2] checked = “bool”: whether button is initially checked. (default false) [3] clickable = “bool”: set to false to disable the button. [4] onClick = “function”: function to call in activity when clicked. [5] text = “text”: text to put next to the button. [6] Radio Group: it will help the radio buttons work mutually. p.s. choose id with “@+id/name” 5. Switch[1] id: unique ID. [2] textOn = “text”: text to show next to “on” (right) side. [3] textOff = “text”: text to show next to “off” (left) side. [4] showText = “bool”: whether to show text on L/R sides. (default false) [5] onClick = “function”: function to call in activity when clicked. [6] text = “text”: text to put on left side next to the switch. 12Switch sw = (Switch) findViewById(R.id.theID);if(sw.isChecked()) &#123;...&#125; 6. ImageButton[1] clickable = “bool”: set to false to disable the button. [2] id: unique id. [3] onClick = “function”: function to call in activity when clicked. [4] src = “/img”: image to put in the button. 7. Convert the resource IDs:[1] int pikaID = getResources().getIdentifier(“pikachu”, “drawable”, getPackageName()); [2] String pika = getResources().getResourceEntryName(R.drawable.pikachu); [3] String full = getResources().getResourceName(R.drawable.pikachu); p.s. R.id.name =&gt; Interger =&gt; [1]; 8. ListView[1] A set of items, that we can click them seperately. [2] Id: unique id; [3] clickable: boolean; [4] entries: “@array/array”, set of options to appear in the list(must match an array in strings.xml) [5] Static lists: content is fixed and known before app runs. (Declare the list elements in the strings.xml resource file) We can declare a string-array in the resources, and add items. Then build entries in ListView and use the string-array. [6] dynamic list: Content is read or generated as the program runs. (Comes from a data file, or from the internet,etc; Must be set in the Java code) (Better!) List adapters: Common adapters: ArrayAdapter(items come from an array or list) and CursorAdaptor(items come from a database query) e.g.1ArrayAdapter&lt;String&gt; name = new ArrayAdapter&lt;&gt;(activty, layout, array); this -&gt; activity; default layout: android.R.layout.simple_list_item_1; get the array/list by reading your file or data source of choice. Using the setAdapter method. p.s. Do it in library way: 1SimpleList.with(this).setItems(R.id.mylist,"Leo","Mike","Don","Raph"); try to do the list event in Java code: anonymous inner class; (Pass the function as parameters) 1234567setOnItemClickListener(AdapterView.onItemClickListener);//Listener for when an item in the list has been clicked.setOnItemLongClick(AdapterView.OnItemClickListener);//Listener for when an item in the list has been clicked and held.//Others: onDrag.onFocusChanged, onHover onKey, onScroll, on Touch p.s. library way:123456789101112131415SimpleList.with(this).setItem(list,dictionary.keySet()); // 1ListView list = $LV(R.id.word.word_list); // 2list.setOnItemClickListener(new Marty()); // 3class Marty implements AdapterView.OnItemClickListener&#123; @override public void onItemClick(ListView parent, View view, int postion, long id);&#125; // 4list.setOnItemClickListener((parent, view, position, id) -&gt; &#123;String word = parent.getItemAtPostion(postion).toString();String defi = dictionary.get(word);toast(defi);&#125;;// 5 Only for Java8: We need to enable java8 in build bradle. (details youtube -- 18min)]]></content>
      <categories>
        <category>Android Application Development</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>tutorial</tag>
        <tag>application</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Tutorial 03-Exception and Synchronization]]></title>
    <url>%2F2018%2F06%2F10%2FJava-Tutorial-03%2F</url>
    <content type="text"><![CDATA[Abstract:The lectures here will introduce the how the exception works in Java, the steps we need to do while importing new package and detail information about synchronization in Java. Lecture 10: Exception1. Definition: Exception happens during the execution time.[1] Thowable: Cannot be solved exception: Error class, is throwed by jvm, which infect our program badly, which cannot be dealt with. Can be solved: Exception class. [2] throws and throw: Anything can be decorated by the two key words are throwable. [3] object-&gt;throwable-&gt;error/exception. [4] throw exeception from class function to main to jvm to print on the control panel (default). The following function will not continue, just end of program. We can make ourself handler instead of the default function. [5] Exceptions construct functions have 3 types, including transmitting nothing, transmitting error index and transmitting String buffer. (Check the manul pdf) [6] If we want to change the name of exeception in java. We can follow the class of Exception. If want to make a class to be an exception child class. In this case, not only we need to throw the self-defined exception in the line, but also we need to use throws after the name of the functions from the used function to the main function and finally to the JVM. [7] Difference between throw and throws: Exception: being checked during compiling exception and run time exception (exception caused by the user or the change of inner state). Runtime Exception and its child class do not need to use throws to throw the exception out of function to upper function like main function. Self-defined Exception extends Exception or RuntimeException. Difference: Throws is used after the name of the function, while throw is used inside the funcction. Throws can throws multiple exceptions class seperated by “,”, while throw throws one exception object. 2. Try catch.[1] If we do not throw the Exception, we have two ways to do: Mention and define the Exception, “throw” the new object and “throws” the new built class. try and catch. This happen after the place the problem really happen. Not in the place where “throw” the exception, but the user (upper level) to “try catch” this exception instead of throwing to the jvm. [2] defination: 123456789101112try&#123; //code needs to be checked with exception.&#125;catch(ExceptionClass variable)// being used to recieve the exception objects&#123; //Solution of exception&#125;finally&#123; //code must be executed&#125; “try catch” and “try catch finally” two types. If the problem is dealt with successfully, then the program will continue executing. Exception class will present the exception information instead of hashtable value as the normal class while printing. [3] Muiltiple catch problem: Multiple catch, then the parent exception should be put in the below. [4] Finally: It is used to executed even we return after return during the error. (Demo3) [5] If one exception is the child of a parent exception, then only the child exception or its parent exception can be threw out. If we catch the parent exception. -&gt; Fu f = new Zi(); If parent exception throw a number of exception, then the child exception should only throw the exception equal or under the parent exception. If parent exception does not throw exception then the child should not throw, just try. 1234567891011121314151617interface Inter throws A,B,C&#123; void function();&#125;class D implements Inter throws A,B(A/B/A,B,C/B,C/nothing)&#123; public void function();&#125;/********************************************************/interface Inter&#123; void function();&#125;class D implements Inter throws Exception// error, should use try catch in the function.&#123; public void function();&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Tutorial 02-class]]></title>
    <url>%2F2018%2F06%2F10%2FJava-Tutorial-02%2F</url>
    <content type="text"><![CDATA[Abstract:The lectures here will introduce the basic defination and ways to use the class probably including construct function, inheritaion, interface, abstract class and etc. Lecture 05: Class and object 01 1. Defination:[1] basic definatio of class and object: 123456789101112131415class Car&#123; int num; String color; void run() &#123; sop(num + ", " + color); &#125;&#125;Car c = new Car();c.run();c.color;c.num; [2] member: variable and function. [3] Storage: The object is created and stored in the heap, then the data heap will be initialized as null or 0 when being created. [4] member variables and local variables: member variables are defined in the class, which can be visited in side the class; local variables are defined in a function, region ir a statement, valid inside the defination area. member variables exist in the object of a class of heap; local variable exists in the function of stack. member variables appears with the objects. The local variables appears with the region. member variables [5] anonymous object: e.g. new Car().run(); -&gt; If we only want to use the function instead of creating the whole object. Function of a class be used once; Being used as transferring parameters; (show(new car())) [6] Two cases: 1234567891011121314151617181920212223242526272829303132333435class Demo1&#123; public static void main(String[] args) &#123; int x = 3; show(3); System.out.println("x = " + x); &#125; public static void show(int x) &#123; x = 4; &#125;&#125;//x in the show is 4, x in the main is 3, output is 3;class Demo2&#123; int x = 3; public static void main(String[] args) &#123; Demo2 d = new Demo2(); d.x = 9; show(d); System.out.println("x = " + d.x); &#125; public static void show(Demo2 d) &#123; d.x = 4; &#125;&#125;//x is 9 of the object d. [7] Encapsulation: provide function to let others to read or write the private variables in the class: 1234567891011private int age = 10;public void setAge(int a)&#123; age = a;&#125;public int getAge()&#123; return age;&#125; Lecture 06: Class and object 02 1. Construct function:[1] The same name with class name; no return value; [2] For one object, construct function can only be used once. [3] this: condition 1: local variable has the same name with member variable. &quot;this&quot; means the pointer to the object who use this -&gt; member variable. Actually, this is hidden when use the each member variable. condition 2: &quot;this&quot; can be used to help communicate among construct function: this(x) -&gt; one construct function can use another construct function. First execute the other construct function(must exist in the first line) then mine, else error may happen. [4] static: Make the varibale/function to be shared by all of the object. Make the varibale/function to be shared by the class. The static varibale/function exists with the appearance of class. Static function can only use the static member varibale/function. Non-static can visit all. “this” and “super” keyword can not be used. (this.x is changed by the className.x) main function is static. When to use static. Keep the variable as a constant without change in class; static region(static{}), This part is executed when the first time the class is built. Construct region({} in class) can be used to initialized each objects of the class. Lecture 07: Class and object 03 1. Makeup for class:[1] If there are more than we need to javac each of the class. [2] Expression: single example design: 12345678910111213141516171819202122232425class Single&#123; private static Single s = new Single(); private Single()&#123;&#125; public static Single getInstance() &#123; return s; &#125;&#125;class Single&#123; private static Single s = null; private Single()&#123;&#125; public static Single getInstance() &#123; if(s == null) s = new Single(); return s; &#125;&#125; 2. Inherit:[1] e.g. class Student extends Person{}; [2] single inherit and multiple inherit. (C++ has multiple inherit, but java cannot) single inherit: one child has one parent; multiple inherit: one child has multiple parent. problem with multiple inherit: if In the two parent two function with the same name may cause uncertainty. If child has the variable, we do not search its parent (override), if local area contains the variable, we do not need to search the member variables. “this” is used to seperate the local and member variable. “super” is used to seperate the child and parent variable. child cannot get the private varaible/function from its parent. Create the child class’s object, then build its parent object. (there is a super() hidden in child class) Override: child’s priority should be equal to or over than parent priority. (default priority &lt; public) Static can only override or be overrided by static. Example: show(){//update; super.show();} -&gt; use super to extend parent’s function. Lecture 08: Class and object 04 1. Makeup for class:[1] In the child class, there is a hidden super() to construct the parent first. [2] If we have this, then we do not need super, because the this will will use the default construct function, then the super in the default construct function will build the parent construct function. [3] Every class extends from the object(root). [4] When a object is built, the construct function is built first, then comes the other initialization, no matter the location of the construct function. [5] When a child object is built and the parent and child class contains the function with the same name and parameters, the construct function in its parent class will first search the function in child class. Because this is a child object. 2. final keyword:[1] If we want to use the method in its parent, while there is a function with the same name in child class, the function in parent will be banned. [2] final keyword will prevent child class extends the function. [3] final can use for function, variable and class which will not be inherited. [4] If the member is decorated by final, we usually use public static final to solid the variable. 3. Abstract class:[1] Both the class name and its member should be decorated by abstract. [2] abstract class cannot be built (e.g. new Parent()). [3] abstract class must has child class. [4] abstract has construct function for child class; abstract can be empty; abstract class cannot be decorated by private, static, final; abstract class can include abstract function and normal function. 4. Interface:[1] When the function of a abstract class are all abstract, we can use the keyword interface to represent this function. [2] Substitude class by interface. [3] Member of interface: global variable: public static final. abstract function: public abstract. The variable and function can be initialized as above if we do not give enough decoration. [4] The implement class must override all of the abstract function in the interface, or the class is abstract class which needs child to realize the other abstract functions. [5] On function an implement multiple interface. If two interface has the same function, one function in the class will implement all of them. [6] Extenstion with inheritation and implement. 12345678910class Q&#123; public void method() &#123;&#125;&#125;class Test2 extends Q implements A,B&#123; //&#125; [7] interfaces can be parent &amp; child relationship among themselves, and they can be multiple inherit. Because there is not function implements. Lecture 09: Class and object 05 1. Polymorphism：[1] improve the class: Animal a = new Cat(); a is a class from Cat to Animal, the function of Animal can be used but special function of Cat cannot be used. It is used to restrict the special implement of function. Afterwards if we still need to use the special function, we need to downgrade the object: Cat c = (Cat) a; However we cannot convert an parent object into child object. [2] instanceof: a instanceof Cat -&gt; used to judge the class/interface specific type. a instanceof parent, a instanceof child, to be more specific. In order to avoid the case like (Cat c = (Cat) a). [3] Override only happen in member function, but not happen in member variables. Member variables: Compiling and Excuting type follow the left type. Member function: Compiling follows the left, while excuting follows the right. Static function: Because Static belongs to class not object, thus; Compiling and Excuting type follow the left type. 2. Inner class:[1] Expression: Outer$Inner.class. [2] Inside class can directly visit outside member, while the outside class need to build object to visit inside member. [3] Other outside class visit the inside member: Outer.Inner in = new Outer.new Inner(); If the inside class is private, the outer other class cannot visit the inside class. [4] static class inner(): The inner appears when the outer class is built. Then the inner() class is like a outer class. Then Outer.Inner in = new Outer.Inner(); The outer object does not need to be built. (If the member function in the inner class is static then the inner class should be static either). [5] Inner class has the reference to outer class: Outer.this. [6] Inner class can be put in the local area: like inside the function of Outer class. If the function want to use the function inside the inner class, it needs to build object to realize this problem. If the inner class need to use the local variable of the function outside, then the variable outside needs to decorated by final. (include the variable in the function “()”) [7] Inner class should be static if the member function of the outer class is static and it wants to build the inner class. Anonymous inner class:[1] The inner class must extends or implements a outer class or interface. [2] As usual, the number of functions in the abstract class should be smaller than or equal to 3. [3] Difference between Object obj = new Object() and new Object() -&gt; The first one build the Object, while the second is converted into the anonymous class.]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Tutorial 01-basic gramma]]></title>
    <url>%2F2018%2F06%2F09%2FJava-Tutorial-01%2F</url>
    <content type="text"><![CDATA[Abstract:This part we start to introduce the basic rules and how to compile the algorithm with Java in detail. The first part will introduce some very basic staff. If I miss something important, please let me know in the comment area. Lecture 01: Hello world! 1. Basic Code:1class Demo 1public static void main(String[] arg) 2. Two kinds of print:[1] System.out.println(“”): print with enter in the end [2] System.out.print(“”): print with enter in the end 3. Compile java file and execute java file:[1] Compile java file to .class file and check the error. 1javac &lt;name&gt;.java [2] execute java file. 1java &lt;name&gt;.class 4. Java makefile.5. Java set classpath, executing the .class file under the folder we need. (Temporary); p.s. %CLASSPATH% means the already pointed path.The only path to find without ‘;’ 1set classpath=&lt;path&gt; (e.g. c:\myclass) The first path to find in the path, then to the following path. 1set classpath=&lt;path&gt;; Firstly search the path in the upper folder, then to the pointed path. 1set classpath=.;&lt;path&gt; 6. public class Demo: only if the class name and the file name keep the same, then the file will be compiled. Lecture 02: Basic gramma 1 1. Keywords:[1] class, interface, byte, short, int, long, float, double, char, boolean, void; true, false, null; if, else, switch, case, default, while, do, for, break, continue, return; private, protected, public, abstract, final, static, synchronized, extends, implements; new, this, super, instanceof, try, catch, finally, throw, throws; package, import; native, strictfp, transient, volatile, assert. [2] p.s. The name of class should start with upperclass. 2. Identifiers:[1] Rule: (Use to define the name) Include 26 Uppercase/lowercase letters, 0-9, _ and $; Cannot start with 0-9; Cannot use Keywords. 3. Comments:[1] Example: Demands &lt;…&gt;; Thought &lt;…&gt;; Steps &lt;…&gt; 4. Constants and variables:[1] Constants: values cannot be changed. (int, float, boolean, ‘’char(ASCII), “”String, null) Default: decimal, 0… -&gt; Oct; 0x… -&gt; Hex; Complement: 0000-0110 -&gt; 1111_1001 + 0000_0001 = 1111_1010 [2] Variables: bytes(8 bits(-128-&gt;+127)), short(16 bits), int(32 bits), long(64 bits); default: int float(32 bits), double(64 bits); default: double; char(2 bits) boolean class interface [] [3] Conversion: Automatic type convert: x = b + 1; (x’s type decide the final type) Convert: y = (int)x; b = b1 + b2 -&gt; might lose accuarcy if b,b1 and b2 in the same type, because the b1 and b2 may change, then the sum might over the limit.(e.g. byte) For the default type like int, the answer will not be alarmed to loss accuarcy, however actually the accuarcy may lose. Caculation[1] Compute: ‘/‘ interger divide; ‘%’; ++, –; short s = 3; s += 4 / s = s + 4;The second one may cause error, because the sum may over the limit making the accuarcy loss. However, the first one, the error may not happen, the automatic conversion may happen, then the alert may be avoided. (s = (short)(s + 4) -&gt; s += 4) [2] Comparison: &amp;, |, ^, !; e.g.(x&gt;2 &amp; x&lt;5) &amp;&amp; and ||: if left false/true for &amp;&amp;/||, the right part will not be executed &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;, &amp;, |, ^, ~: &gt;&gt;&gt;: unsigned left shift 1 (x&gt;1)?100:200 Lecture 03: Basic gramma 21. Function:[1] Overload: In the same class; With the same name; different number of parameters or parameters with different types; 2. Array:[1] Defination: Start with 0; Defination: int[] arr = new int[5]; int[] arr = new int[] {3,5,1,7}; int[] arr = {3,5,1,7} initial with default 0; The array is actually created during the execution time instead of compiling, so if the index is out of range, the error will be reported only during the execution time. The array will point to nothing, if we let arr = null. [4] Storage; Stack: store the local variables. Heap: store the arrays, objects(created by new) and global variables, main. (default: float: 0.0f; double: 0.0; boolean: false; char ‘\u0000’). Each thing in the heap contains a header address; Each variable in the heap is initialized in the default value. The useless buffer int the heap can be recycled automatically, while C++ need to use destructor function to deal with this problem. Lecture 04: Basic gramma 31. Array (make up):[1] two types of array defination: 12int[] arr = new int[]&#123;1, 2, 3, 4&#125;;int[] arr = &#123;1, 2, 3, 4&#125;; Normally for reading the 1 and 2 are the same, however there are tiny different between the two defination for transferring new value.(1: dynamic; 2: static) [2] int[] arr = new int[3]; (arr.length) [3] decimal to hex: 123n1 = num &amp; 15;num &gt;&gt;&gt; 4;n2 = num &amp; 15; 2. 2-D Array[1] Defination: First create 3 then 2. 1int[][] arr = new int[3][2]; multi-steps: 1234int[][] arr = new int[3][];arr[0] = new int[2];arr[1] = new int[1];arr[2] = new int[3]; column length = arr.length, row length = arr[i].length; define the array while each element is known; 1int[][] arr = &#123;&#123;3, 1, 7&#125;, &#123;5, 8, 2, 9&#125;, &#123;4, 1&#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Start with Hexo]]></title>
    <url>%2F2018%2F06%2F08%2FStartWithHexo%2F</url>
    <content type="text"><![CDATA[Abstract:This is my first blog, thanks to the toolkits of Hexo helpping me reduce large amount of time and energy for studying and searching. This blog is to conclude the function and tools that I need to use for developing my future blogs. In breif, the tutorial starts with basic ways of using Markdown and html language for beautifying the webpages, functions used under the frameworks of the Hexo and some plugins that can improve the type of media for the expression. Finally the reference of the source I might use and copyright might involve will be put in the end of the articles. Announcement:This is my first blog to record interesting things and the new cool things I studied recently. Everything I put on my blog may include objects of mine or others. (I will assign the author and the link at the end of the articals) These thoughts and objections may not right and may only represent my personal view. So, if there exist something not so well or even worse, please let me know in the comment area. Markdown basic:1. Title:There are two ways to write the title, Atx and Setext: Atx 123456# first title## second title### third title#### forth title##### fifth title###### sixth title effect: Setext 12345first title======second title------ effect: 2. font format and paragragh structure:Including bold, Italic, delete line, newline, dividing line, indent ,disordered list and the link. The code is as follow: 12345678910111213141516171819202122232425262728293031323334353637// 1. bold font**word**__word__&lt;b&gt;word&lt;/b&gt;// 2. Italic font*word*_word_&lt;i&gt;word&lt;/i&gt;// 4. delete line~~word~~&lt;del&gt;word&lt;/del&gt;// 5. Italic and bold font_**word**_// 3. newline, click enter twice, click space or:&lt;br /&gt;// 4. dividing line***---__// 5. indent:&gt;sentence of 1 indent&gt;&gt;sentence of 2 indent...// 6. disordered list:&lt;h4 id=&quot;disorderlist&quot;&gt;the list&lt;/h4&gt;* list 1* list 2// 7. the link:[Writing](url) 3. content and table:The code is as follow: 123456789// content &lt;h1 id=&quot;title1&quot;&gt;title1&lt;/h1&gt; //sign the title1 [the name of title1](#title1) //jump to the title 1// table, every font of the element inside can be adjust as bold, italic and etc.title 1|title 2|title 3---|---|--- //make a line to divide the table andcontent 1|content 2|content 3content 4|content 5|content 6 effect of the table: title 1 title 2 title 3 content 1 content 2 content 3 content 4 content 5 content 6 4. Others:This part will present how to insert image, video and music. Image:there are two ways to insert.12345[Writing](url)// first&lt;div class=&quot;abstract&quot;&gt; &lt;img style=&quot;max-width:100%; overflow:hidden&quot; src=&quot;/images/hexo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/div&gt; // second: &quot;div&quot; is used to keep the image inside the border, the &quot;max-width&quot; control the size, the &quot;overflow&quot; is used control whether to hide the border or not, &quot;src&quot; means the url. The picture wall heaven. video:There are three ways to insert video, the first is the special plugin for youtube video, the second one is used to deal with local(cloud) video, and the last one is for the normal other types of videos for all types of online video. The code is as follow. 123456789101112131415&#123;% youtube youtube_id %&#125;&lt;div class=&quot;video&quot;&gt; &lt;video id=&quot;video&quot; width=&quot;#&quot; height=&quot;#&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;url for the video poster&quot;&gt; &lt;source id=&quot;id name&quot; src=&quot;url for the video address&quot; type=&quot;video/mp4(type of video)&quot;&gt; &lt;/video&gt;&lt;/div&gt;&lt;iframe height=# width=# src=&quot;url&quot; frameborder=0 allowfullscreen&gt;&lt;/iframe&gt; There is another plugin for playing online youku video. Here are several steps to do to use the plugin. First install the hexo-tag-youku plugin in git bash under the folder of the Hexo: 1npm install hexo-tag-youku --save add the youku video as follow: 123&#123;% youku height width %&#125;youku_id&#123;% endyouku %&#125; Effects of video playing is shown as follow. youtube plugin. video player for cloud/local video. iframe for all types of videos. plugin for youku videos. p.s. Inorder to make the image and video player changing automatically to ensure different size of windows, we add this instead of real width and height. (Only useful for the some of video html clip and img html clip) 1style=&quot;max-width:100%; overflow:hidden&quot; musicThere is a plugin for playing music. Here are several steps to do to use the plugin. First install the hexo-tag-aplayer plugin in git bash under the folder of the Hexo: 1npm install --save hexo-tag-aplayer add the music as follow: 1&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125; var ap = new APlayer({ element: document.getElementById("aplayer-YvCDRYgw"), narrow: false, autoplay: false, showlrc: false, music: { title: "Kass Theme", author: "Nintendo", url: "/others/Kass Theme.mp3", pic: "/images/Zelda Ost.jpg", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); Kass theme from Zelda Breath of Wild Ost import operations in Hexo: normal operations: First we need to have a github repository. Then we need to install the Hexo under the folder. 1234567891011121314151617# install hexonpm install hexo-cli g# init the blog folderhexo init blog# enter the blog foldercd blog# install npmnpm install# install some pluginsnpm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save generate the local server: 1234567# create the static webpageshexo generate# open the serverhexo server# If the server 4000 does not repond, make some change as follow.hexo s -p 4001 build a new Markdown file for a new blog: 1hexo new &quot;name&quot; deploy the hexo bolg to the github.adjust the _blog/_config.yml_ file as follow: 123456789# Deployment## Docs:deploy: # types type: git # repository repo: git@github.com:name/name.github.io.git # branch branch: master deploy the blog to the github. 123456# clean the static webpagehexo clean# generate static pagehexo generate# deploy bloghexo deploy Reference: [1]: https://hexo.io/docs/writing.html [2]: https://www.jianshu.com/p/2c9f0b3b2b0e [3]: https://github.com/fi3ework/hexo-theme-archer [4]: https://www.jianshu.com/p/0130ad32a08d [5]: https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1 [6]: https://blog.csdn.net/huwei2003/article/details/52523407 [7]: https://www.jianshu.com/p/6e41e3191963 [8]: https://segmentfault.com/q/1010000000424925/a-1020000007644640 [9]: https://blog.csdn.net/q_qtowerq_q/article/details/78565166]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Webpage Design</tag>
      </tags>
  </entry>
</search>
